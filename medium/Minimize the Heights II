Input:
K = 2, N = 4
Arr[] = {1, 5, 8, 10}
Output:
5
Explanation:
The array can be modified as 
{3, 3, 6, 8}. The difference between 
the largest and the smallest is 8-3 = 5


class Solution{

  public:
    int getMinDiff(int arr[], int n, int k) {
           vector<pair<int, int>> v;
        
        for(int i = 0; i < n; i++) {
            if(arr[i] - k >= 0) {
                v.push_back({arr[i]-k, i});
            }
            
            v.push_back({arr[i]+k, i});
        }
        
        sort(v.begin(), v.end());
        
        vector<int> visited(n, 0);
        int l = 0, r = 0, elements = 0;
        
        
        while(elements < n && r < v.size()) {
            if(visited[v[r].second] == 0) {
                elements++;
            }
            visited[v[r].second]++;
            r++;
        }
        
        int minHeight = v[r-1].first - v[l].first;
        while(r < v.size()) {
            if(visited[v[l].second] == 1) elements--;
            visited[v[l].second]--;
            l++;
            
            
            while(elements < n && r < v.size()) {
                if(visited[v[r].second] == 0) {
                    elements++;
                }
                visited[v[r].second]++;
                r++;
            }
            if(elements == n) minHeight = min(minHeight, v[r-1].first - v[l].first);
            else break;
        }
        return minHeight;
    }

};
