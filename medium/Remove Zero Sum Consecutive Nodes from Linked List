Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.

After doing so, return the head of the final linked list.  You may return any such answer.

Example 1:

Input: head = [1,2,-3,3,1]
Output: [3,1]
Note: The answer [1,2,1] would also be accepted.
Example 2:

Input: head = [2,1,-2,-1,-1,4]
Output: [2,1]
Example 3:

Input: head = [1,2,3,-3,-2]
Output: [1]



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


class Solution {
public:
    ListNode* removeZeroSumSublists(ListNode* head) {
       ListNode harsh(0),*p=&harsh;
        vector<int>aksh;
        while(head != NULL)
        {
            if(head->val != 0)
            {
                
            
            aksh.push_back(head->val);
            }
            head=head->next;
        }
        
        
        for(int i=0;i<aksh.size();i++)
        {
            int sum=0;
            int j=0;
            for(j=i;j<aksh.size();j++)
            {
                sum+=aksh[j];
                if(sum==0)
                    break;
            }
            if(sum==0)
            {
                
            
            aksh.erase(aksh.begin()+i,aksh.begin()+j+1);
            i=-1;
            }
        }
        for(int i=0;i<aksh.size();i++)
        {
            p->next=new ListNode(aksh[i]);
            p=p->next;
        }
        
        return harsh.next;
    }
};
