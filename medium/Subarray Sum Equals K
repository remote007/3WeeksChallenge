Input: nums = [1,1,1], k = 2
Output: 2

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
       unordered_map<int,int>m;
        int count=0,sum=0;
        for(int i=0;i<nums.size();i++){
// calculating diagonal sum , which is continuously increasing
            sum += nums[i];
            if(sum == k)
                count++;
// if the diff btw sum and k is present add it's frequency to count           
            if(m.find(sum - k) != m.end())
                count+=m[sum-k];
// if it isnt present then no inc in count 
             m[sum]++;
        }
        return count;
    }
};
