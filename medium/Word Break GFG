Input:
n = 12
B = { "i", "like", "sam",
"sung", "samsung", "mobile",
"ice","cream", "icecream", 
"man", "go", "mango" }
A = "ilikesamsung"
Output:
1
Explanation:
The string can be segmented as 
"i like samsung" or "i like sam sung".


int min(int a, int b){
    if(a < b){
        return a;
    }
    return b;
}

int dp[1101];

class Solution
{
public:
    bool solve(int taken, vector <string> &b, string &a){
    	if(taken == a.size()){
    		// If we have traversed the whole string.
    		return true;
    	}
    	
    	if(dp[taken] != -1){
    		return dp[taken];
    	}
    	
    	bool ans = false;
    // 	for(int i = 0; i < a.size(); i++){
    		for(int len = 1; len <= min(100, a.size() - taken); len++){
    			string can = a.substr(taken, len);
    			for(int j = 0; j < b.size(); j++){
    				if(b[j] == can){
    					ans |= solve(taken + len, b, a);
    					if(ans){
    					    return true;
    					}
    				}
    			}
    		}
    // 	}
    	return dp[taken] = ans;
    }

    int wordBreak(string A, vector<string> &B) {
    	for(int i = 0; i <= A.size(); i++){
    		dp[i] = -1;
    	}
        return solve(0, B, A);
    }
};
